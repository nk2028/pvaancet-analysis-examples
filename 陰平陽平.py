# 引入 `QieyunEncoder`，用於解析切韻音系音韻地位
# 所用 `QieyunEncoder` 版本爲 `0.4.1`
# 安裝方法：`pip install "qieyun-encoder==0.4.1"`
# 由於 `QieyunEncoder` 目前仍處於測試版，使用方法可能會發生變動，
# 因此需要固定版本號
import QieyunEncoder

# 設置四個變量，分別累計四種情況出現的次數，初始值均爲 0
下字陰平被切字陽平 = 0
下字陽平被切字陰平 = 0
下字陰平被切字陰平 = 0
下字陽平被切字陽平 = 0

# 開啓廣韻反切音韻地位表
with open('廣韻反切音韻地位表.csv') as f:
    # 跳過第一行，第一行爲標題行，無需解析
    next(f)

    # 對於後續的每一行
    for line in f:
        # 去除行尾的換行符，然後以逗號分開
        小韻號, 小韻首字, 上字, 下字, 被切字音韻描述們, 上字音韻描述們, 下字音韻描述們 = line.rstrip('\n').split(',')

        # 由音韻描述建立音韻地位對象
        # 可能有多種可能的音韻地位，以 / 分隔，所以需要轉換為 list
        被切字音韻地位們 = list(map(QieyunEncoder.音韻地位.from描述, 被切字音韻描述們.split('/')))
        上字音韻地位們 = list(map(QieyunEncoder.音韻地位.from描述, 上字音韻描述們.split('/')))
        下字音韻地位們 = list(map(QieyunEncoder.音韻地位.from描述, 下字音韻描述們.split('/')))

        # 使用 `屬於` 方法判斷某個音韻地位是否屬於某個指定條件
        # 可能有多種可能的音韻地位
        # 只考慮「每種可能的音韻地位都符合给定条件」的情況
        下字平聲 = all(下字音韻地位.屬於('平聲') for 下字音韻地位 in 下字音韻地位們)
        被切字平聲 = all(被切字音韻地位.屬於('平聲') for 被切字音韻地位 in 被切字音韻地位們)

        # 只分析平聲，故將範圍限定在平聲字
        if 下字平聲 and 被切字平聲:
            # 使用 `屬於` 方法判斷某個音韻地位是否屬於某個指定條件
            下字陰平 = all(下字音韻地位.屬於('全清 或 次清') for 下字音韻地位 in 下字音韻地位們)
            下字陽平 = all(下字音韻地位.屬於('全濁 或 次濁') for 下字音韻地位 in 下字音韻地位們)

            被切字陰平 = all(被切字音韻地位.屬於('全清 或 次清') for 被切字音韻地位 in 被切字音韻地位們)
            被切字陽平 = all(被切字音韻地位.屬於('全濁 或 次濁') for 被切字音韻地位 in 被切字音韻地位們)

            # 判斷條件
            if 下字陰平 and 被切字陽平:
                下字陰平被切字陽平 += 1
            elif 下字陽平 and 被切字陰平:
                下字陽平被切字陰平 += 1
            elif 下字陰平 and 被切字陰平:
                下字陰平被切字陰平 += 1
            elif 下字陽平 and 被切字陽平:
                下字陽平被切字陽平 += 1

# 輸出累計結果
print(f'下字陰平，被切字陽平：{下字陰平被切字陽平}')
print(f'下字陽平，被切字陰平：{下字陽平被切字陰平}')
print(f'下字陰平，被切字陰平：{下字陰平被切字陰平}')
print(f'下字陽平，被切字陽平：{下字陽平被切字陽平}')
